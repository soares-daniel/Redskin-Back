# Generated by CodiumAI

import pytest
import pydantic
import decouple

from app.config.settings.base import BaseSettings

"""
Code Analysis

Main functionalities:
The BaseSettings class is a configuration class that inherits from pydantic.BaseSettings. 
It defines the settings for a FastAPI application, including server configuration, database configuration, security settings, logging, and hashing. 
It also provides a property method to set all FastAPI class attributes.

Methods:
- Config: a nested class that defines the configuration for the BaseSettings class, including case sensitivity, the location of the .env file, and validation of assignments.
- set_app_attributes: a property method that returns a dictionary of FastAPI class attributes, including title, version, debug, description, docs_url, openapi_url, redoc_url, openapi_prefix, and api_prefix.

Fields:
...
"""


class TestBaseSettings:
    #  Tests that all properties of the BaseSettings class are loaded correctly from environment variables.
    def test_config_loads_env_vars_correctly(self):
        monkeypatch = None  # replace with actual monkeypatch object
        settings = BaseSettings()
        for prop in dir(settings):
            if not prop.startswith("__") and not callable(getattr(settings, prop)):
                assert getattr(settings, prop) is not None

    #  Tests that the `JWT_ACCESS_TOKEN_EXPIRATION_TIME` property is calculated correctly.
    def test_jwt_access_token_expiration_time_calculation(self, monkeypatch):
        monkeypatch.setenv("JWT_MIN", "60")
        monkeypatch.setenv("JWT_HOUR", "24")
        monkeypatch.setenv("JWT_DAY", "7")
        settings = BaseSettings()
        assert settings.JWT_ACCESS_TOKEN_EXPIRATION_TIME == 60 * 24 * 7

    #  Tests that the class handles a missing `.env` file.
    def test_missing_env_file(self):
        class TestSettings(pydantic.BaseSettings):
            TEST_VAR: str = decouple.config("test_var", cast=str)

            class Config(pydantic.BaseConfig):
                import pathlib
                ROOT_DIR: pathlib.Path = pathlib.Path(__file__).parent.parent.parent.parent.resolve()
                case_sensitive: bool = True
                env_file: str = f"{str(ROOT_DIR)}/tests/.env.nonexistent"
                validate_assignment: bool = True

        with pytest.raises(decouple.UndefinedValueError):
            TestSettings()
